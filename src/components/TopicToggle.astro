---
import type { CollectionEntry } from "astro:content";
import DynamicImage from "./DynamicImage.astro";

interface Props {
  topic: CollectionEntry<"topics">;
  selected: string[];
}
const {
  topic: {
    id,
    data: { icon, confidence, isPriority }
  },
  selected
} = Astro.props;

const isSelected = selected.includes(id);

const nextUrl = new URL(Astro.url);
nextUrl.searchParams.set(
  "topics",
  isSelected
    ? selected.filter((t) => t !== id).join(",")
    : [...selected, id].join(",")
);
---

<a href={`${nextUrl.pathname}?${nextUrl.searchParams.toString()}#results`}>
  <div
    class={`w-16 sm:w-20 aspect-square responsive ${isSelected && "selected"} ${isPriority && "ring-2 ring-accent"} topic card flex flex-col items-center justify-center gap-1`}
  >
    <div class="flex flex-row gap-1">
      {
        icon && (
          <DynamicImage
            src={`icons/${icon}.svg`}
            alt={id}
            class="w-4 sm:w-6 aspect-square dark:invert"
          />
        )
      }

      {
        confidence && (
          <div class="flex flex-col-reverse h-6 w-1 rounded-full overflow-hidden bg-[var(--text-card-color)]">
            <div class="bg-intense" style={`height: ${confidence}%`} />
          </div>
        )
      }
    </div>

    <span
      class="text-xs font-semibold text-nowrap text-ellipsis overflow-hidden max-w-24"
    >
      {id}
    </span>
  </div>
</a>

<style>
  .topic {
    transition: all 0.2s ease;
  }

  .topic:hover {
    transform: translateY(-2px);
  }

  .topic.selected {
    @apply ring-2 ring-blue-500 bg-blue-50 dark:bg-blue-900/20;
  }
</style>
