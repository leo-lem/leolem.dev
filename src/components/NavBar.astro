---
import DraggableAvatar from "./DraggableAvatar.astro";
import DynamicImage from "./DynamicImage.astro";
import IconLink from "./IconLink.astro";

const navigation = ["blog", "services", "projects", "explore", "about"];
const { socials } = Astro.props;
---

<nav
  class="sticky top-0 default-color flex flex-col gap-2 p-3 z-10 shadow shadow-[var(--border-color)] sm:flex-row sm:items-center sm:justify-between"
>
  <DraggableAvatar />

  <div class="flex items-center justify-between gap-4">
    <div class="flex items-center gap-4">
      <span class="w-10 h-10 rounded-full border"></span>

      <a
        href="/"
        class="animate-slidefadein navigation flex flex-col whitespace-nowrap"
      >
        <span class="font-semibold text-xs sm:text-sm">Leopold Lemmermann</span>
        <span class="text-xs sm:text-sm">Software Engineer | MSc</span>
      </a>
    </div>

    <div class="animate-slidefadein flex flex-row items-center gap-4">
      {
        socials.map((url: string) => (
          <IconLink
            type={url.split("https://")[1].split(".")[0]}
            url={url}
            size_class="h-6 w-6 sm:h-8 sm:w-8"
          />
        ))
      }

      <button id="mobile-menu-toggle" class="sm:hidden focus:outline-none">
        <DynamicImage
          src="icons/menu.svg"
          alt="Menu"
          class="h-6 w-6 dark:invert"
        />
      </button>
    </div>
  </div>

  <div
    id="mobile-menu"
    class="hidden max-h-0 overflow-hidden transition-[max-height] duration-300 ease-in-out flex-col items-center gap-2 sm:flex sm:flex-row sm:gap-4 sm:overflow-visible sm:animate-slidefadein"
  >
    {
      navigation.map((item) => (
        <a
          href={`/${item}`}
          class={`navigation capitalize ${Astro.url.pathname.includes(item) ? "active" : ""}`}
          aria-current={Astro.url.pathname.includes(item) ? "page" : undefined}
        >
          {item}
        </a>
      ))
    }
  </div>
</nav>

<style>
  nav {
    color: var(--text-color);
    background-color: var(--bg-color);
    border-color: var(--border-color);
  }

  nav a.active {
    @apply font-bold underline;
  }

  nav a {
    color: var(--text-color);
    @apply transition;
  }

  nav a:hover {
    background: linear-gradient(
      to right,
      var(--accent-color-start),
      var(--accent-color-end)
    );
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
</style>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const toggle = document.getElementById("mobile-menu-toggle");
    const menu = document.getElementById("mobile-menu");

    toggle?.addEventListener("click", () => {
      const isHidden = menu?.classList.contains("hidden");

      if (isHidden) {
        menu.classList.remove("hidden");
        menu.classList.add("flex");
        menu.style.maxHeight = menu.scrollHeight + "px";
      } else {
        menu.style.maxHeight = "0px";
        setTimeout(() => {
          menu.classList.remove("flex");
          menu.classList.add("hidden");
        }, 300);
      }
    });
  });
</script>
